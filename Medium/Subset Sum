#include <bits/stdc++.h>
bool f(int i,int sum,vector<int>&arr,vector<vector<int>>&dp)
{
    
    if(sum==0) return true;
    if(i==0) return (arr[0]==sum);
    if(dp[i][sum]!=-1) return dp[i][sum];
    int pick=0;
    if(sum>=arr[i]) pick=f(i-1,sum-arr[i],arr,dp);
    int np=f(i-1,sum,arr,dp);
    return dp[i][sum]=(pick||np);
} 
bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>>dp(n,vector<bool>(k+1,0));
    for(int i=0;i<n;i++) dp[i][0]=1;
    dp[0][arr[0]]=true;
    for(int i=1;i<n;i++)
    {
        for(int j=1;j<=k;j++)
        {
            int pick=0;
            if(j>=arr[i]) pick=dp[i-1][j-arr[i]];
            int np=dp[i-1][j];
            dp[i][j]=np||pick;
        }
    }
   return dp[n-1][k];
}
